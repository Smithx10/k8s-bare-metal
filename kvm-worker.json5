{
  variables: {
    triton_account: "{{ env `SDC_ACCOUNT` }}",
    triton_key_id: "{{ env `SDC_KEY_ID` }}",
    triton_key_path: "{{ env `SDC_KEY_PATH` }}",
    triton_url: "{{ env `SDC_URL` }}",
    triton_bastion_host: "{{ env `BASTION_HOST` }}",
    triton_private_network: "{{ env `PRIVATE_NETWORK` }}",
    image_name: "k8s-worker-kvm-16.04",
    image_version: "1.0.0",
  },

  builders: [
    {
      type: "triton",

      triton_url: "{{ user `triton_url` }}",
      triton_account: "{{ user `triton_account` }}",
      triton_key_id: "{{ user `triton_key_id` }}",
      triton_key_material: "{{ user `triton_key_path` }}",

      source_machine_name: "k8s-worker-kvm-builder",
      source_machine_package: "k4-highcpu-kvm-3.75G",
      source_machine_image: "554abb2e-a957-4b51-a601-97c934eadf33",

      // Private network for control plane only
      source_machine_networks: [
        "{{ user `triton_private_network` }}",
      ],

      // `ubuntu` user for ubuntu certified images
      ssh_username: "ubuntu",
      ssh_private_key_file: "{{ user `triton_key_path` }}",
      ssh_bastion_username: "root",
      ssh_bastion_host: "{{ user `triton_bastion_host` }}",
      ssh_bastion_private_key_file: "{{ user `triton_key_path` }}",

      image_name: "{{ user `image_name` }}",
      image_version: "{{ user `image_version` }}",
    },
  ],

  provisioners: [
    { // Clean up the base Ubuntu image
      type: "shell",
      inline: [
        // Log the version of the builder image
        "uname -a",
        // Update packaging
        "sudo apt-get update",
        // Additional packages for management
        "sudo apt-get install -y bash wget curl jq ca-certificates python-minimal",
        // Install Docker 1.12.1
        "sudo wget --no-verbose https://get.docker.com/builds/Linux/x86_64/docker-1.12.1.tgz && sudo tar -xvf docker-1.12.1.tgz && sudo cp docker/docker* /usr/bin/",
        // Install CNI plugins
        "sudo mkdir -p /opt/cni && sudo wget --no-verbose https://storage.googleapis.com/kubernetes-release/network-plugins/cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz && sudo tar -xvf cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz -C /opt/cni",
        // Install Kubernetes worker binaries
        "for bin in kubectl kube-proxy kubelet; do sudo wget --no-verbose -P /usr/bin https://storage.googleapis.com/kubernetes-release/release/v1.5.6/bin/linux/amd64/$bin && sudo chmod +x /usr/bin/$bin; done",
        // Make Kubernetes directories
        "sudo mkdir -p /var/lib/kubernetes /var/lib/kubelet /etc/kubernetes",
      ],
    },
    {
      type: "file",
      source: "templates/docker.service",
      destination: "/home/ubuntu/docker.service",
    },
    {
      type: "file",
      source: "templates/kubelet.service",
      destination: "/home/ubuntu/kubelet.service",
    },
    {
      type: "file",
      source: "templates/kube-proxy.service",
      destination: "/home/ubuntu/kube-proxy.service",
    },
    {
      type: "shell",
      inline: [
        "sudo mv /home/ubuntu/*.service /etc/systemd/system/ && sudo chmod 600 /etc/systemd/system/docker.service /etc/systemd/system/kubelet.service /etc/systemd/system/kube-proxy.service",
        "sudo systemctl daemon-reload",
        "sudo systemctl enable docker",
        "sudo systemctl start docker",
        "sudo systemctl disable kubelet kube-proxy",
      ],
    },
  ],
}
